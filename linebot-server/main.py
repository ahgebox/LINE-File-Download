from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, ImageMessage, VideoMessage, TextMessage
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import os
from datetime import datetime

# ‚ñ† Config
CHANNEL_ACCESS_TOKEN = os.getenv("CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET       = os.getenv("CHANNEL_SECRET")
CHANNEL_ID           = os.getenv("CHANNEL_ID", "Unknown")

BASE_PATH = '/data'  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render
PROCESSED_IDS_FILE = os.path.join(BASE_PATH, 'processed_ids.txt')

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

app = Flask(__name__)
os.makedirs(BASE_PATH, exist_ok=True)

# ‚ñ† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /data/YYYY-MM-DD/category
def ensure_category_folder(category):
    today = datetime.now().strftime('%Y-%m-%d')
    folder = os.path.join(BASE_PATH, today, category)
    os.makedirs(folder, exist_ok=True)
    return folder

# ‚ñ† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ö‡∏ï‡πå
def save_bytes(mid, content, category, ext='jpg'):
    folder = ensure_category_folder(category)
    filename = f"{datetime.now().strftime('%Y-%m-%d_%H%M%S')}_{mid}.{ext}"
    file_path = os.path.join(folder, filename)
    with open(file_path, 'wb') as f:
        f.write(content)
    print(f"‚úÖ Saved {category.upper()} to", file_path)

# ‚ñ† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å MID ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
def is_duplicate(mid):
    if not os.path.exists(PROCESSED_IDS_FILE):
        return False
    with open(PROCESSED_IDS_FILE, 'r') as f:
        return mid in f.read()

def mark_processed(mid):
    with open(PROCESSED_IDS_FILE, 'a') as f:
        f.write(mid + '\n')

# ‚ñ† LINE Webhook
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ‚ñ† ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    print("‚úâÔ∏è Received TextMessage:", event.message.text)

# ‚ñ† ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    mid = event.message.id
    if is_duplicate(mid): return
    content = line_bot_api.get_message_content(mid).content
    save_bytes(mid, content, 'images', ext='jpg')
    mark_processed(mid)
    print("üñºÔ∏è Received ImageMessage")

# ‚ñ† ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
@handler.add(MessageEvent, message=VideoMessage)
def handle_video(event):
    mid = event.message.id
    if is_duplicate(mid): return
    content = line_bot_api.get_message_content(mid).content
    save_bytes(mid, content, 'videos', ext='mp4')
    mark_processed(mid)
    print("üéûÔ∏è Received VideoMessage")

# ‚ñ† ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 18:00
def daily_summary():
    today = datetime.now().strftime('%Y-%m-%d')
    log_dir = os.path.join(BASE_PATH, 'logs')
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, f'{today}-log.txt')

    images = os.path.join(BASE_PATH, today, 'images')
    videos = os.path.join(BASE_PATH, today, 'videos')
    image_count = len(os.listdir(images)) if os.path.exists(images) else 0
    video_count = len(os.listdir(videos)) if os.path.exists(videos) else 0

    with open(log_file, 'w', encoding='utf-8') as f:
        f.write(f"üìÖ {today}\n")
        f.write(f"üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {image_count} ‡πÑ‡∏ü‡∏•‡πå\n")
        f.write(f"üéûÔ∏è ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {video_count} ‡πÑ‡∏ü‡∏•‡πå\n")
    print("üìä Daily summary saved to", log_file)

# ‚ñ† Scheduler
scheduler = BackgroundScheduler()
scheduler.add_job(daily_summary, CronTrigger(hour=18, minute=0))
scheduler.start()

# ‚ñ† ‡∏´‡∏ô‡πâ‡∏≤ root
@app.route("/")
def home():
    return "‚úÖ LINE Bot Server is Running on Render!"

# ‚ñ† Run
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
